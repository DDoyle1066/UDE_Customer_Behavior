
## Load packages
```julia
using OrdinaryDiffEq
using ModelingToolkit
using DataDrivenDiffEq
using DataDrivenSparse
using LinearAlgebra, ComponentArrays
using Zygote, Optimization, OptimizationOptimJL, OptimizationFlux, OptimizationOptimisers
using Lux, DiffEqFlux, SciMLSensitivity
using Plots
using Statistics
using Random
```
```julia
function simple!(du, u, p,t)
    du[1] = p[1]*u[1]
    du[2] = p[2]/u[2]
    return nothing
end
function simple(u, p,t)
    return [p[1]*u[1], p[2]/u[2]]
end
u0 = [1.0, 1.0]
tspan = (0.0, 1.0)
p = [0.05, 0.1]
prob = ODEProblem{true, SciMLBase.FullSpecialize}(simple!, u0, tspan, p)
sol = solve(prob, Tsit5(), saveat = 0.1)
plot(sol)
```

```julia
dd_prob_full = DataDrivenProblem(sol)
@variables t (u(t))[1:2]
b = [polynomial_basis(u, 5); sin.(u); 1 ./ u]
basis = Basis(b,u)
# Create the thresholds which should be used in the search process
λ = exp10.(-5:0.1:2)
# Create an optimizer for the SINDy problem
opt = STLSQ(λ)
ddsol = solve(dd_prob_full, basis, opt)
println(get_basis(ddsol))
get_basis(ddsol).eqs[2]
```

```julia

```